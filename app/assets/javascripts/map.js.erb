var mainPanel;
var map;
var proj900913 = new OpenLayers.Projection("EPSG:900913");
var proj4326   = new OpenLayers.Projection("EPSG:4326");
var glatosStudiesStore = new Ext.data.ArrayStore({fields : []});
var glatosDeployments  = {
   features    : []
  ,start       : new Date()
  ,ending      : new Date()
  ,frequencies : []
};
var deploymentsLayer = new OpenLayers.Layer.Vector('Deployments',{
  styleMap : new OpenLayers.StyleMap({
    'default' : new OpenLayers.Style(OpenLayers.Util.applyDefaults({
       pointRadius     : 6
      ,fillColor       : '#e8bb99'
      ,fillOpacity     : 0.7
      ,strokeWidth     : 1
      ,strokeColor     : '#b56529'
      ,strokeOpacity   : 1
    }))
    ,'select' : new OpenLayers.Style(OpenLayers.Util.applyDefaults({
       pointRadius     : 6
      ,fillColor       : '#99e9ae'
      ,fillOpacity     : 0.7
      ,strokeWidth     : 1
      ,strokeColor     : '#1d8538'
      ,strokeOpacity   : 1
    }))
    ,'temporary' : new OpenLayers.Style(OpenLayers.Util.applyDefaults({
       pointRadius     : 6
      ,fillColor       : '#99BBE8'
      ,fillOpacity     : 0.7
      ,strokeWidth     : 1
      ,strokeColor     : '#1558BB'
      ,strokeOpacity   : 1
    }))
  })
});
var mouseoverObs;
var popupObs;
var hiliteCtll;
var popupCtl;
var dNow = new Date();
dNow.setMinutes(0);
dNow.setSeconds(0);
var maxOptionsPerFilter = 5; // how many items to list before kicking in a scrollbar (for projects & frequency)

if (typeof Range.prototype.createContextualFragment == "undefined") {
    Range.prototype.createContextualFragment = function(html) {
        var doc = this.startContainer.ownerDocument;
        var container = doc.createElement("div");
        container.innerHTML = html;
        var frag = doc.createDocumentFragment(), n;
        while ( (n = container.firstChild) ) {
            frag.appendChild(n);
        }
        return frag;
    };
}

function init() {
  Ext.QuickTips.init();

  var loadingMask = Ext.get('loading-mask');
  var loading = Ext.get('loading');

  //Hide loading message
  loading.fadeOut({duration : 0.2,remove : true});

  //Hide loading mask
  loadingMask.setOpacity(0.9);
  loadingMask.shift({
     xy       : loading.getXY()
    ,width    : loading.getWidth()
    ,height   : loading.getHeight()
    ,remove   : true
    ,duration : 1
    ,opacity  : 0.1
    ,easing   : 'bounceOut'
  });

  Ext.QuickTips.init();

  // don't remember window settings
  Ext.override(Ext.Component,{
    stateful : false
  });

  var introPanel = new Ext.Panel({
     height : 60
    ,border : false
    ,html   : '<table class="smallFont" width="100%"><tr><td>Place your curser over points on the map to view additional information about projects and receivers.  Use the tools below to filter receivers by project, operating schedule, acoustic frequency, and status.</td></tr></table>'
  });

  var glatosStudiesSelModel = new Ext.grid.CheckboxSelectionModel({
    header : ''
  });
  var glatosStudiesGridPanel = new Ext.grid.GridPanel({
     id               : 'glatosStudiesGridPanel'
    ,title            : 'Filter by project'
    ,store            : glatosStudiesStore
    ,height           : 2 * 21.1 + 26 + 6 + 25
    ,border           : false
    ,autoExpandColumn : 'name'
    ,columns          : [
       glatosStudiesSelModel
      ,{id : 'name' ,dataIndex : 'name'}
      ,{id : 'count',dataIndex : 'count',renderer : renderCount,align : 'right',width : 70}
    ]
    ,hideHeaders      : true
    ,loadMask         : true
    ,deferRowRender   : false
    ,selModel         : glatosStudiesSelModel
    ,listeners        : {
      rowclick : function(grid,rowIndex,e) {
        syncGlatos();
      }
    }
    ,tbar             : [
       '->'
      ,{
         text    : 'Reset all filters'
        ,icon    : "<%= asset_path 'arrow_refresh.png' %>"
        ,handler : function() {
          Ext.getCmp('glatosSeasonalGridPanel').getSelectionModel().suspendEvents();
          Ext.getCmp('glatosTimesStart').suspendEvents();
          Ext.getCmp('glatosTimesEnd').suspendEvents();
          Ext.getCmp('glatosStudiesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosStudiesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosFrequenciesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosSeasonalGridPanel').getSelectionModel().selectAll()
          Ext.getCmp('glatosProjectStatusesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosTimesStart').setValue(glatosDeployments.start);
          Ext.getCmp('glatosTimesEnd').setValue(glatosDeployments.ending);
          Ext.getCmp('glatosSeasonalGridPanel').getSelectionModel().resumeEvents();
          Ext.getCmp('glatosTimesStart').resumeEvents();
          Ext.getCmp('glatosTimesEnd').resumeEvents();
          syncGlatos();
        }
      }
    ]
  });

  var glatosSeasonalSelModel = new Ext.grid.CheckboxSelectionModel({
     header : ''
  });
  var glatosSeasonalGridPanel = new Ext.grid.GridPanel({
     id               : 'glatosSeasonalGridPanel'
    ,title            : 'Filter by operating schedule'
    ,store            : new Ext.data.ArrayStore({
      fields : [
        'name'
      ]
      ,data : [
         ['Year-round']
        ,['Seasonal only']
      ]
    })
    ,height           : 2 * 21.1 + 26 + 6
    ,border           : false
    ,autoExpandColumn : 'name'
    ,columns          : [
       glatosSeasonalSelModel
      ,{id : 'name',dataIndex : 'name'}
    ]
    ,hideHeaders      : true
    ,loadMask         : true
    ,deferRowRender   : false
    ,selModel         : glatosSeasonalSelModel
    ,listeners        : {
      rowclick : function(grid,rowIndex,e) {
        syncGlatos();
      }
      ,viewready : function(grid) {
        grid.suspendEvents();
        grid.getSelectionModel().selectAll();
        grid.resumeEvents();
      }
    }
  });

  var glatosFrequenciesSelModel = new Ext.grid.CheckboxSelectionModel({
    header : ''
  });
  var glatosFrequenciesGridPanel = new Ext.grid.GridPanel({
     id               : 'glatosFrequenciesGridPanel'
    ,title            : 'Filter by acoustic frequency'
    ,store            : new Ext.data.ArrayStore({fields : ['frequency']})
    ,height           : 2 * 21.1 + 26 + 6
    ,border           : false
    ,autoExpandColumn : 'frequency'
    ,columns          : [
       glatosFrequenciesSelModel
      ,{id : 'frequency',dataIndex : 'frequency'}
    ]
    ,hideHeaders      : true
    ,loadMask         : true
    ,deferRowRender   : false
    ,selModel         : glatosFrequenciesSelModel
    ,listeners        : {
      rowclick : function(grid,rowIndex,e) {
        syncGlatos();
      }
    }
  });

  var glatosProjectStatusSelModel = new Ext.grid.CheckboxSelectionModel({
    header : ''
  });
  var glatosProjectStatusesGridPanel = new Ext.grid.GridPanel({
     id               : 'glatosProjectStatusesGridPanel'
    ,title            : 'Filter by status'
    ,store            : new Ext.data.ArrayStore({
      fields : [
        'name'
      ]
      ,data : [
         ['Ongoing']
        ,['Proposed']
        ,['Finished']
      ]
    })
    ,height           : 3 * 21.1 + 26 + 6
    ,border           : false
    ,autoExpandColumn : 'name'
    ,collapsible      : true
    ,columns          : [
       glatosProjectStatusSelModel
      ,{id : 'name',dataIndex : 'name'}
    ]
    ,hideHeaders      : true
    ,loadMask         : true
    ,deferRowRender   : false
    ,selModel         : glatosProjectStatusSelModel
    ,listeners        : {
      rowclick : function(grid,rowIndex,e) {
        syncGlatos();
      }
      ,viewready : function(grid) {
        grid.suspendEvents();
        grid.getSelectionModel().selectAll();
        grid.resumeEvents();
      }
      ,collapse  : function() {
        Ext.getCmp('glatosTimesFormPanel').expand();
      }
      ,expand    : function() {
        Ext.getCmp('glatosTimesFormPanel').collapse();
        syncGlatos();
      }
    }
  });

  var glatosTimesFormPanel = new Ext.FormPanel({
     id          : 'glatosTimesFormPanel'
    ,title       : 'Filter by time'
    ,height      : 2 * 21.1 + 26 + 6 + 20
    ,border      : false
    ,collapsible : true
    ,collapsed   : true
    ,labelWidth  : 1
    ,layout      : 'column'
    ,tbar             : [
       '->'
      ,{
         text    : 'Reset times'
        ,icon    : "<%= asset_path 'arrow_refresh.png' %>"
        ,handler : function() {
          Ext.getCmp('glatosTimesStart').suspendEvents();
          Ext.getCmp('glatosTimesEnd').suspendEvents();
          Ext.getCmp('glatosTimesStart').setValue(glatosDeployments.start);
          Ext.getCmp('glatosTimesEnd').setValue(glatosDeployments.ending);
          Ext.getCmp('glatosTimesStart').resumeEvents();
          Ext.getCmp('glatosTimesEnd').resumeEvents();
          syncGlatos();
        }
      }
    ]
    ,items       : [
      {border : false,columnWidth : 0.40,layout : 'form',items : new Ext.form.DateField({
         id         : 'glatosTimesStart'
        ,disabled   : true
        ,showToday  : false
        ,allowBlank : false
        ,width      : 100
        ,listeners  : {change : function() {
          syncGlatos();
        }}
      })}
      ,{border : false,columnWidth : 0.10,layout : 'form',html : '-',bodyStyle : 'text-align:center'}
      ,{border : false,columnWidth : 0.40,layout : 'form',items : new Ext.form.DateField({
         id         : 'glatosTimesEnd'
        ,disabled   : true
        ,showToday  : false
        ,allowBlank : false
        ,width      : 100
        ,listeners  : {change : function() {
          syncGlatos();
        }}
      })}
      ,{border : false,columnWidth : 0.10,layout : 'form',items : new Ext.Button({
         text : 'Go'
      })}
    ]
    ,listeners : {
      collapse : function() {
        Ext.getCmp('glatosProjectStatusesGridPanel').expand();
      }
      ,expand  : function() {
        Ext.getCmp('glatosProjectStatusesGridPanel').collapse();
        syncGlatos();
      }
    }
  });

  var mainPanel = new Ext.Panel({
     layout   : 'border'
    ,renderTo : 'mainPanel'
    ,width    : 400
    ,height   : 400
    ,hidden   : true
    ,items    : [
       new Ext.Panel({
         region      : 'west'
        ,id          : 'controlPanel'
        ,width       : 275
        ,title       : 'GLATOSWeb Explore Tool'
        ,collapsible : true
        ,autoScroll  : true
        ,items       : [
           introPanel
          ,glatosStudiesGridPanel
          ,glatosSeasonalGridPanel
          ,glatosFrequenciesGridPanel
          ,glatosProjectStatusesGridPanel
          ,glatosTimesFormPanel
        ]
      })
      ,new Ext.Panel({
         region    : 'center'
        ,id        : 'mapPanel'
        ,items     : {
           border    : false
          ,html      : '<div id="map"><div id="changeBasemap"></div></div>'
          ,listeners : {afterrender : function() {
            initMap();
            if (Ext.isIE) {
              Ext.getCmp('mapPanel').fireEvent('bodyresize');
            }
            new Ext.Button({
               renderTo : 'changeBasemap'
              ,text     : 'Change map<br>background'
              ,scale    : 'large'
              ,icon     : "<%= asset_path 'map.png' %>"
              ,handler  : function() {
                map.baseLayer.name == 'Google Satellite' ? map.setBaseLayer(map.getLayersByName('Google Map')[0]) : map.setBaseLayer(map.getLayersByName('Google Satellite')[0]);
              }
            });
          }}
        }
        ,listeners : {bodyresize : function() {
          var el = document.getElementById('map');
          if (el) {
            el.style.width  = this.getWidth() + 'px';
            el.style.height = this.getHeight() + 'px';
            map.updateSize();
          }
        }}
      })
    ]
  });

  window.onresize = function(e) {
    mainPanel.setSize(getVPSize()[0],getVPSize()[1] - 80);
    mainPanel.doLayout();
    if (!mainPanel.isVisible()) {
      mainPanel.show();
    }
  }

  window.onresize();
}

function initMap() {
  deploymentsLayer.events.register('featuresadded',this,function(e) {
    glatosStudiesStore.each(function(rec) {
      rec.set('count',0);
      rec.commit();
    });
    for (var i = 0; i < e.features.length; i++) {
      var rec = glatosStudiesStore.getAt(glatosStudiesStore.find('id',e.features[i].attributes.study_id));
      rec.set('count',rec.get('count') + 1);
      rec.commit();
    }
  });
  deploymentsLayer.events.register('featuresremoved',this,function(e) {
    glatosStudiesStore.each(function(rec) {
      rec.set('count',0);
      rec.commit();
    });
  });

  map = new OpenLayers.Map('map',{
     projection        : proj900913
    ,displayProjection : proj4326
    ,units             : "m"
    ,maxExtent         : new OpenLayers.Bounds(-20037508,-20037508,20037508,20037508.34)
    ,layers            : [
      new OpenLayers.Layer.Google('Google Satellite',{
         type          : google.maps.MapTypeId.SATELLITE
        ,projection    : proj900913
        ,maxZoomLevel  : maxZoomLevel
      })
      ,new OpenLayers.Layer.Google('Google Map',{
         type          : google.maps.MapTypeId.MAP
        ,projection    : proj900913
        ,maxZoomLevel  : maxZoomLevel
      })
      ,deploymentsLayer
    ]
  });
  map.setCenter(new OpenLayers.LonLat(-9367578.6331264,5443194.7163551),6);
  map.events.register('moveend',this,function() {
    if (popupObs && !popupObs.isDestroyed) {
      popupObs.show();
    }
  });

  hiliteCtl = new OpenLayers.Control.SelectFeature(deploymentsLayer,{
     hover         : true
    ,highlightOnly : true
    ,renderIntent  : 'temporary'
    ,eventListeners : {
      beforefeaturehighlighted : function(e) {
        if (mouseoverObs && mouseoverObs.isVisible()) {
          mouseoverObs.hide();
        }
        var rec = glatosStudiesStore.getAt(glatosStudiesStore.find('id',e.feature.attributes.study_id));
        mouseoverObs = new Ext.ToolTip({
           html         : rec.get('name') + '&nbsp;-&nbsp;Site&nbsp;' + e.feature.attributes.code
          ,anchor       : 'bottom'
          ,target       : 'OpenLayers.Geometry.Point_' + (Number(e.feature.id.split('_')[e.feature.id.split('_').length - 1]) - 1)
          ,hideDelay    : 0
          ,listeners    : {hide : function(tt) {
            if (!tt.isDestroyed && !Ext.isIE) {
              tt.destroy();
            }
          }}
        });
        mouseoverObs.show();
      }
    }
  });
  map.addControl(hiliteCtl);
  hiliteCtl.activate();

  popupCtl = new OpenLayers.Control.SelectFeature(deploymentsLayer,{
    eventListeners : {
      featurehighlighted : function(e) {
        if (popupObs && popupObs.isVisible()) {
          popupObs.hide();
        }
        var rec = glatosStudiesStore.getAt(glatosStudiesStore.find('id',e.feature.attributes.study_id));
        var tr  = [
           "<tr><td colspan=2 style='text-align:center'><b>" + rec.get('description') + "</b></td></tr>"
          ,"<tr><td colspan=2 style='text-align:center'>" + (e.feature.attributes.start ? dateToString(isoStringToDate(e.feature.attributes.start)) : '') + " - " + (e.feature.attributes.recovered ? dateToString(isoStringToDate(e.feature.attributes.recovered)) : 'currently active') + "</td></tr>"
          ,"<tr><td colspan=2 style='text-align:center'><table width='100%'>"
            ,"<tr><td class='obsInnerPopup'>seasonal</td><td class='obsInnerPopupVal'>" + (e.feature.attributes.seasonal ? 'yes' : 'no') + "</td></tr>"
            ,"<tr><td class='obsInnerPopup'>frequency</td><td class='obsInnerPopupVal'>" + (e.feature.attributes.frequency ? e.feature.attributes.frequency + ' KHz' : 'unknown') + "</td></tr>"
            ,"<tr><td class='obsInnerPopup'>code</td><td class='obsInnerPopupVal'>" + e.feature.attributes.otn_array.code + "</td></tr>"
            ,"<tr><td class='obsInnerPopup'>description</td><td class='obsInnerPopupVal'>" + e.feature.attributes.otn_array.description + "</td></tr>"
            ,(e.feature.attributes.otn_array.waterbody ? "<tr><td class='obsInnerPopup'>water body</td><td class='obsInnerPopupVal'>" + e.feature.attributes.otn_array.waterbody + "</td></tr>" : '')
          ,"</table></td></tr>"
          ,"<tr><td colspan=2 style='text-align:center'><font color=gray>Visit the <a target=_blank href='/'>GLATOS home page</a> for more information.</font></td></tr>"
        ];
        popupObs = new Ext.ToolTip({
           title     : rec.get('name') + '&nbsp;-&nbsp;Site&nbsp;' + e.feature.attributes.code
          ,items     : {bodyCssClass : 'obsPopup',html : '<table>' + tr.join('') + '</table>'}
          ,anchor    : 'bottom'
          ,width     : 345
          ,target    : 'OpenLayers.Geometry.Point_' + (Number(e.feature.id.split('_')[e.feature.id.split('_').length - 1]) - 1)
          ,autoHide  : false
          ,closable  : true
          ,listeners : {
            hide : function(tt) {
              if (!tt.isDestroyed) {
                tt.destroy();
              }
              if (e.feature.layer) {
                popupCtl.unselect(e.feature);
              }
            }
          }
        });
        popupObs.show();
      }
    }
  });
  map.addControl(popupCtl);
  popupCtl.activate();

  glatosStudiesStore.fireEvent('beforeload');
  OpenLayers.Request.issue({
     method  : 'GET'
    ,url     : '/studies.json'
    ,callback : function(r) {
      var json = new OpenLayers.Format.JSON().read(r.responseText);
      var menu = [];
      var minD;
      // for some reason I can't rely on the store to sort the recs by name, so do it before adding
      var studies = {};
      for (var i = 0; i < json.length; i++) {
        studies[json[i].name] = new glatosStudiesStore.recordType({
           'id'             : json[i].id
          ,'name'           : json[i].name
          ,'description'    : json[i].description
          ,'species'        : json[i].species
          ,'start'          : isoStringToDate(json[i].start)
          ,'ending'         : isoStringToDate(json[i].ending)
          ,'url'            : json[i].url
          ,'seasonal'       : json[i].seasonal == 'true'
          ,'code'           : json[i].code
          ,'model'          : json[i].model
          ,'count'          : 0
        });
        var ymd = json[i].start.split('T')[0].split('-');
        var d   = new Date(ymd[0],ymd[1] - 1,ymd[2]);
        if (!minD || d < minD) {
          minD = d;
        }
      }
      var sKeys = [];
      for (var s in studies) {
        sKeys.push(s);
      }
      sKeys.sort();
      for (var i = 0; i < sKeys.length; i++) {
        glatosStudiesStore.add(studies[sKeys[i]]);
      }
      glatosStudiesStore.fireEvent('load');
      Ext.getCmp('glatosStudiesGridPanel').getSelectionModel().selectAll();
      Ext.getCmp('glatosStudiesGridPanel').setHeight((glatosStudiesStore.getCount() <= maxOptionsPerFilter ? glatosStudiesStore.getCount() : maxOptionsPerFilter) * 21.1 + 26 + 6 + 25);

      OpenLayers.Request.issue({
         method   : 'GET'
        ,url      : '/deployments.geo'
        ,callback : function(r) {
          var json        = new OpenLayers.Format.JSON().read(r.responseText);
          var frequencies = {};
          for (var i in json) {
            if (json[i].geojson) {
              var geojson = new OpenLayers.Format.GeoJSON();
              var f       = geojson.read(json[i].geojson)[0];
              f.geometry.transform(proj4326,map.getProjectionObject());
              glatosDeployments.features.push(f);
              if (f.attributes.start && isoStringToDate(f.attributes.start).getTime() < glatosDeployments.start.getTime()) {
                glatosDeployments.start = isoStringToDate(f.attributes.start);
              }
              if (f.attributes.recovered && isoStringToDate(f.attributes.recovered).getTime() > glatosDeployments.ending.getTime()) {
                glatosDeployments.ending = isoStringToDate(f.attributes.recovered);
              }
              if (f.attributes.frequency) {
                frequencies[f.attributes.frequency] = true;
              }
            }
          }

          deploymentsLayer.addFeatures(glatosDeployments.features);

          for (var i in frequencies) {
            glatosDeployments.frequencies.push(i);
          }
          glatosDeployments.frequencies.sort();
          var sto = Ext.getCmp('glatosFrequenciesGridPanel').getStore();
          for (var i = 0; i < glatosDeployments.frequencies.length; i++) {
            sto.add(new sto.recordType({
              frequency : glatosDeployments.frequencies[i] + ' KHz'
            }));
          }
          sto.add(new sto.recordType({
            frequency : 'Unknown'
          }));
          Ext.getCmp('glatosFrequenciesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosFrequenciesGridPanel').setHeight((sto.getCount() <= maxOptionsPerFilter ? sto.getCount() : maxOptionsPerFilter) * 21.1 + 26 + 6);

          Ext.getCmp('glatosTimesStart').setValue(glatosDeployments.start);
          Ext.getCmp('glatosTimesStart').setMinValue(glatosDeployments.start);
          Ext.getCmp('glatosTimesStart').setMaxValue(glatosDeployments.ending);
          Ext.getCmp('glatosTimesEnd').setValue(glatosDeployments.ending);
          Ext.getCmp('glatosTimesEnd').setMinValue(glatosDeployments.start);
          Ext.getCmp('glatosTimesEnd').setMaxValue(glatosDeployments.ending);
          Ext.getCmp('glatosTimesStart').enable();
          Ext.getCmp('glatosTimesEnd').enable();
        }
      });
    }
  });
}

function renderCount(val) {
  return val + ' on map';
}

function isoStringToDate(s) {
  // 2010-01-01T00:00:00Z
  var p = s.split('T');
  var ymd = p[0].split('-');
  var hm = p[1].split(':');
  return new Date(
     ymd[0]
    ,ymd[1] - 1
    ,ymd[2]
    ,hm[0]
    ,hm[1]
  );
}

function dateToString(d) {
  var mon = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
  return mon[d.getMonth()] + ' ' + d.getDate() + ', ' + d.getFullYear();
}

function syncGlatos() {
  hiliteCtl.unselectAll();
  popupCtl.unselectAll();

  function glatosProjectStatusOK(studiesRec) {
    if (Ext.getCmp('glatosProjectStatusesGridPanel').collapsed) {
      return true;
    }
    var ok = false;
    var sel = Ext.getCmp('glatosProjectStatusesGridPanel').getSelectionModel().getSelections();
    for (var i = 0; i < sel.length; i++) {
      if (sel[i].get('name') == 'Ongoing') {
        ok = ok || (studiesRec.get('start') < dNow && dNow < studiesRec.get('ending'));
      }
      if (sel[i].get('name') == 'Proposed') {
        ok = ok || dNow < studiesRec.get('start');
      }
      if (sel[i].get('name') == 'Finished') {
        ok = ok || studiesRec.get('ending') < dNow;
      }
    }
    return ok;
  }

  deploymentsLayer.removeFeatures(deploymentsLayer.features);

  var studyFilter = {};
  var sel = Ext.getCmp('glatosStudiesGridPanel').getSelectionModel().getSelections();
  for (var i = 0; i < sel.length; i++) {
    if (glatosProjectStatusOK(sel[i])) {
      studyFilter[sel[i].get('id')] = true;
    }
  }

  var seasonalFilter = {};
  sel = Ext.getCmp('glatosSeasonalGridPanel').getSelectionModel().getSelections();
  for (var i = 0; i < sel.length; i++) {
    seasonalFilter[sel[i].get('name')] = true;
  }

  var frequencyFilter = {};
  sel = Ext.getCmp('glatosFrequenciesGridPanel').getSelectionModel().getSelections();
  for (var i = 0; i < sel.length; i++) {
    frequencyFilter[sel[i].get('frequency').replace(' KHz','')] = true;
  }

  var timeFilter = [];
  if (!Ext.getCmp('glatosTimesFormPanel').collapsed && Ext.getCmp('glatosTimesStart').getValue() != '' && Ext.getCmp('glatosTimesEnd').getValue() != '') {
    timeFilter = [Ext.getCmp('glatosTimesStart').getValue().getTime(),Ext.getCmp('glatosTimesEnd').getValue().getTime()];
  }

  var f = [];
  for (var i = 0; i < glatosDeployments.features.length; i++) {
    var start = isoStringToDate(glatosDeployments.features[i].attributes.start).getTime();
    var ending = dNow;
    if (glatosDeployments.features[i].attributes.ending) {
      ending = isoStringToDate(glatosDeployments.features[i].attributes.ending).getTime();
    }
    if (
      studyFilter[glatosDeployments.features[i].attributes.study_id]
      && (
        (seasonalFilter['Year-round'] ? !glatosDeployments.features[i].attributes.seasonal : false)
        || (seasonalFilter['Seasonal only'] ? glatosDeployments.features[i].attributes.seasonal : false)
      )
      && (glatosDeployments.features[i].attributes.frequency ? frequencyFilter[glatosDeployments.features[i].attributes.frequency] : frequencyFilter['Unknown'])
      && (timeFilter.length == 2 ? (
        (timeFilter[0] <= start && start <= timeFilter[1])
        || (timeFilter[0] <= ending && ending <= timeFilter[1])
        || (start <= timeFilter[0] && timeFilter[1] <= ending)
      ) : true)
    ) {
      f.push(glatosDeployments.features[i]);
    } 
  }

  deploymentsLayer.addFeatures(f);
}

var map;
var proj900913 = new OpenLayers.Projection("EPSG:900913");
var proj4326   = new OpenLayers.Projection("EPSG:4326");
var glatosStudiesStore = new Ext.data.ArrayStore({fields : []});
var glatosDeployments  = {
   features    : []
  ,start       : new Date()
  ,ending      : new Date()
  ,frequencies : []
};
var deploymentsLayer = new OpenLayers.Layer.Vector('Deployments',{});
var mouseoverObs;
var popupObs;

function init() {
  Ext.QuickTips.init();

  var loadingMask = Ext.get('loading-mask');
  var loading = Ext.get('loading');

  //Hide loading message
  loading.fadeOut({duration : 0.2,remove : true});

  //Hide loading mask
  loadingMask.setOpacity(0.9);
  loadingMask.shift({
     xy       : loading.getXY()
    ,width    : loading.getWidth()
    ,height   : loading.getHeight()
    ,remove   : true
    ,duration : 1
    ,opacity  : 0.1
    ,easing   : 'bounceOut'
  });

  Ext.QuickTips.init();

  // don't remember window settings
  Ext.override(Ext.Component,{
    stateful : false
  });

  var introPanel = new Ext.Panel({
     height : 60
    ,border : false
    ,html   : '<table class="smallFont" width="100%"><tr><td align=justify>Place your curser over points on the map to view additional information about projects and receivers.  Use the tools below to filter receivers by project, operating schedule, acoustic frequency, and status.</td></tr></table>'
  });

  var glatosStudiesSelModel = new Ext.grid.CheckboxSelectionModel({
    header : ''
  });
  var glatosStudiesGridPanel = new Ext.grid.GridPanel({
     id               : 'glatosStudiesGridPanel'
    ,title            : 'Filter by project'
    ,store            : glatosStudiesStore
    ,height           : 2 * 21.1 + 26 + 6 + 25
    ,border           : false
    ,autoExpandColumn : 'name'
    ,columns          : [
       glatosStudiesSelModel
      ,{id : 'name'          ,dataIndex : 'name'}
      ,{id : 'receiversCount',dataIndex : 'receiversCount',renderer : renderReceiversCount,align : 'right',width : 70}
    ]
    ,hideHeaders      : true
    ,loadMask         : true
    ,deferRowRender   : false
    ,selModel         : glatosStudiesSelModel
    ,listeners        : {
      rowclick : function(grid,rowIndex,e) {
        return; // foo
        syncGlatos(true);
      }
    }
    ,tbar             : [
       '->'
      ,{
         text    : 'Reset all filters'
        ,icon    : "<%= asset_path 'arrow_refresh.png' %>" // brokenImg
        ,handler : function() {
          Ext.getCmp('glatosSeasonalGridPanel').getSelectionModel().suspendEvents();
          Ext.getCmp('glatosTimesStart').suspendEvents();
          Ext.getCmp('glatosTimesEnd').suspendEvents();
          Ext.getCmp('glatosStudiesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosStudiesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosFrequenciesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosSeasonalGridPanel').getSelectionModel().selectRow(0)
          Ext.getCmp('glatosProjectStatusesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosTimesStart').setValue(glatosDeployments.start);
          Ext.getCmp('glatosTimesEnd').setValue(glatosDeployments.ending);
          Ext.getCmp('glatosSeasonalGridPanel').getSelectionModel().resumeEvents();
          Ext.getCmp('glatosTimesStart').resumeEvents();
          Ext.getCmp('glatosTimesEnd').resumeEvents();
          return; // foo
          syncGlatos(true);
        }
      }
    ]
  });

  var glatosSeasonalSelModel = new Ext.grid.CheckboxSelectionModel({
     header       : ''
    ,singleSelect : true
    // make sure 1 row is selected
    ,listeners    : {rowdeselect : function(selModel,idx) {
      selModel.selectRow((idx  + 1) % 2);
    }}
  });
  var glatosSeasonalGridPanel = new Ext.grid.GridPanel({
     id               : 'glatosSeasonalGridPanel'
    ,title            : 'Filter by operating schedule'
    ,store            : new Ext.data.ArrayStore({
      fields : [
        'name'
      ]
      ,data : [
         ['Year-round']
        ,['Seasonal only']
      ]
    })
    ,height           : 2 * 21.1 + 26 + 6
    ,border           : false
    ,autoExpandColumn : 'name'
    ,columns          : [
       glatosSeasonalSelModel
      ,{id : 'name',dataIndex : 'name'}
    ]
    ,hideHeaders      : true
    ,loadMask         : true
    ,deferRowRender   : false
    ,selModel         : glatosSeasonalSelModel
    ,listeners        : {
      rowclick : function(grid,rowIndex,e) {
        return; // foo
        syncGlatos(true);
      }
      ,viewready : function(grid) {
        grid.suspendEvents();
        grid.getSelectionModel().selectRow(0);
        grid.resumeEvents();
      }
    }
  });

  var glatosFrequenciesSelModel = new Ext.grid.CheckboxSelectionModel({
    header : ''
  });
  var glatosFrequenciesGridPanel = new Ext.grid.GridPanel({
     id               : 'glatosFrequenciesGridPanel'
    ,title            : 'Filter by acoustic frequency'
    ,store            : new Ext.data.ArrayStore({fields : ['frequency']})
    ,height           : 2 * 21.1 + 26 + 6
    ,border           : false
    ,autoExpandColumn : 'frequency'
    ,columns          : [
       glatosFrequenciesSelModel
      ,{id : 'frequency',dataIndex : 'frequency'}
    ]
    ,hideHeaders      : true
    ,loadMask         : true
    ,deferRowRender   : false
    ,selModel         : glatosFrequenciesSelModel
    ,listeners        : {
      rowclick : function(grid,rowIndex,e) {
        return; // foo
        syncGlatos(true);
      }
    }
  });

  var glatosProjectStatusSelModel = new Ext.grid.CheckboxSelectionModel({
    header : ''
  });
  var glatosProjectStatusesGridPanel = new Ext.grid.GridPanel({
     id               : 'glatosProjectStatusesGridPanel'
    ,title            : 'Filter by status'
    ,store            : new Ext.data.ArrayStore({
      fields : [
        'name'
      ]
      ,data : [
         ['Ongoing']
        ,['Proposed']
        ,['Finished']
      ]
    })
    ,height           : 3 * 21.1 + 26 + 6
    ,border           : false
    ,autoExpandColumn : 'name'
    ,collapsible      : true
    ,columns          : [
       glatosProjectStatusSelModel
      ,{id : 'name',dataIndex : 'name'}
    ]
    ,hideHeaders      : true
    ,loadMask         : true
    ,deferRowRender   : false
    ,selModel         : glatosProjectStatusSelModel
    ,listeners        : {
      rowclick : function(grid,rowIndex,e) {
        return; // foo
        syncGlatos(true);
      }
      ,viewready : function(grid) {
        grid.suspendEvents();
        grid.getSelectionModel().selectAll();
        grid.resumeEvents();
      }
      ,collapse  : function() {
        Ext.getCmp('glatosTimesFormPanel').expand();
      }
      ,expand    : function() {
        Ext.getCmp('glatosTimesFormPanel').collapse();
        return; // foo
        syncGlatos(true);
      }
    }
  });

  var glatosTimesFormPanel = new Ext.FormPanel({
     id          : 'glatosTimesFormPanel'
    ,title       : 'Filter by time'
    ,height      : 2 * 21.1 + 26 + 6 + 20
    ,border      : false
    ,collapsible : true
    ,collapsed   : true
    ,labelWidth  : 1
    ,layout      : 'column'
    ,tbar             : [
       '->'
      ,{
         text    : 'Reset times'
        ,icon    : "<%= asset_path 'arrow_refresh.png' %>"
        ,handler : function() {
          Ext.getCmp('glatosTimesStart').suspendEvents();
          Ext.getCmp('glatosTimesEnd').suspendEvents();
          Ext.getCmp('glatosTimesStart').setValue(glatosDeployments.start);
          Ext.getCmp('glatosTimesEnd').setValue(glatosDeployments.ending);
          Ext.getCmp('glatosTimesStart').resumeEvents();
          Ext.getCmp('glatosTimesEnd').resumeEvents();
          return; // foo
          syncGlatos(true);
        }
      }
    ]
    ,items       : [
      {border : false,columnWidth : 0.40,layout : 'form',items : new Ext.form.DateField({
         id         : 'glatosTimesStart'
        ,disabled   : true
        ,showToday  : false
        ,allowBlank : false
        ,width      : 100
        ,listeners  : {change : function() {
          return; // foo
          syncGlatos(true);
        }}
      })}
      ,{border : false,columnWidth : 0.10,layout : 'form',html : '-',bodyStyle : 'text-align:center'}
      ,{border : false,columnWidth : 0.40,layout : 'form',items : new Ext.form.DateField({
         id         : 'glatosTimesEnd'
        ,disabled   : true
        ,showToday  : false
        ,allowBlank : false
        ,width      : 100
        ,listeners  : {change : function() {
          return; // foo
          syncGlatos(true);
        }}
      })}
      ,{border : false,columnWidth : 0.10,layout : 'form',items : new Ext.Button({
         text : 'Go'
      })}
    ]
    ,listeners : {
      collapse : function() {
        Ext.getCmp('glatosProjectStatusesGridPanel').expand();
      }
      ,expand  : function() {
        Ext.getCmp('glatosProjectStatusesGridPanel').collapse();
        return; // foo
        syncGlatos(true);
      }
    }
  });

  new Ext.Viewport({
     layout : 'border'
    ,items  : [
      new Ext.Panel({
         region : 'north'
        ,id     : 'banner'
        ,html   : ''
        ,height : 81
        ,border : false
      })
      ,new Ext.Panel({
         region      : 'west'
        ,width       : 275
        ,title       : 'GLATOSWeb Explore Tool'
        ,collapsible : true
        ,autoScroll  : true
        ,items       : [
           introPanel
          ,glatosStudiesGridPanel
          ,glatosSeasonalGridPanel
          ,glatosFrequenciesGridPanel
          ,glatosProjectStatusesGridPanel
          ,glatosTimesFormPanel
        ]
      })
      ,new Ext.Panel({
         region    : 'center'
        ,id        : 'mapPanel'
        ,items     : {
           border    : false
          ,html      : '<div id="map"></div>'
          ,listeners : {afterrender : function() {
            initMap();
            if (Ext.isIE) {
              Ext.getCmp('mapPanel').fireEvent('bodyresize');
            }
          }}
        }
        ,listeners : {bodyresize : function() {
          var el = document.getElementById('map');
          if (el) {
            el.style.width  = this.getWidth() + 'px';
            el.style.height = this.getHeight() + 'px';
            map.updateSize();
          }
        }}
      })
    ]
  });
}

function initMap() {
  map = new OpenLayers.Map('map',{
     projection        : proj900913
    ,displayProjection : proj4326
    ,units             : "m"
    ,maxExtent         : new OpenLayers.Bounds(-20037508,-20037508,20037508,20037508.34)
    ,layers            : [
      new OpenLayers.Layer.Google('Google Satellite',{
         type          : google.maps.MapTypeId.SATELLITE
        ,projection    : proj900913
      })
      ,deploymentsLayer
    ]
  });
  map.setCenter(new OpenLayers.LonLat(-9367578.6331264,5443194.7163551),6);

  var hiliteCtl = new OpenLayers.Control.SelectFeature(deploymentsLayer,{
     hover         : true
    ,highlightOnly : true
    ,renderIntent  : 'temporary'
    ,eventListeners : {
      beforefeaturehighlighted : function(e) {
        if (mouseoverObs && mouseoverObs.isVisible()) {
          mouseoverObs.hide();
        }
        var rec = glatosStudiesStore.getAt(glatosStudiesStore.find('id',e.feature.attributes.study_id));
        mouseoverObs = new Ext.ToolTip({
           html         : rec.get('name') + '&nbsp;-&nbsp;Site&nbsp;' + e.feature.attributes.code
          ,anchor       : 'bottom'
          ,target       : 'OpenLayers.Geometry.Point_' + (Number(e.feature.id.split('_')[e.feature.id.split('_').length - 1]) - 1)
          ,hideDelay    : 0
          ,listeners    : {hide : function(tt) {
            if (!tt.isDestroyed) {
              tt.destroy();
            }
          }}
        });
        mouseoverObs.show();
      }
    }
  });
  map.addControl(hiliteCtl);
  hiliteCtl.activate();

  var popupCtl = new OpenLayers.Control.SelectFeature(deploymentsLayer,{
    eventListeners : {
      featurehighlighted : function(e) {
        if (popupObs && popupObs.isVisible()) {
          popupObs.hide();
        }
        var rec = glatosStudiesStore.getAt(glatosStudiesStore.find('id',e.feature.attributes.study_id));
        var tr  = [
           "<tr><td colspan=2 style='text-align:center'><b>" + rec.get('description') + "</b></td></tr>"
          ,"<tr><td colspan=2 style='text-align:center'>" + (e.feature.attributes.start ? dateToString(isoDateToDate(e.feature.attributes.start)) : '') + " - " + (e.feature.attributes.recovered ? dateToString(isoDateToDate(e.feature.attributes.recovered)) : 'currently active') + "</td></tr>"
          ,"<tr><td colspan=2 style='text-align:center'>frequency : " + (e.feature.attributes.frequency ? e.feature.attributes.frequency + ' Hz' : 'unknown') + "</td></tr>"
          ,"<tr><td colspan=2 style='text-align:center'><font color=gray>Visit the <a target=_blank href='http://www.glfc.org/telemetry/overview.php'>GLATOS home page</a> for more information.</font></td></tr>"
        ];
        popupObs = new Ext.ToolTip({
           title     : rec.get('name') + '&nbsp;-&nbsp;Site&nbsp;' + e.feature.attributes.code
          ,items     : {bodyCssClass : 'obsPopup',html : '<table>' + tr.join('') + '</table>'}
          ,anchor    : 'bottom'
          ,width     : 345
          ,target    : 'OpenLayers.Geometry.Point_' + (Number(e.feature.id.split('_')[e.feature.id.split('_').length - 1]) - 1)
          ,autoHide  : false
          ,closable  : true
          ,listeners : {hide : function(tt) {
            if (!tt.isDestroyed) {
              tt.destroy();
            }
            if (e.feature.layer) {
              popupCtl.unselect(e.feature);
            }
          }}
        });
        popupObs.show();
      }
    }
  });
  map.addControl(popupCtl);
  popupCtl.activate();

  glatosStudiesStore.fireEvent('beforeload');
  OpenLayers.Request.issue({
     method  : 'GET'
    ,url     : '/studies.json'
    ,callback : function(r) {
      var json = new OpenLayers.Format.JSON().read(r.responseText);
      var menu = [];
      var minD;
      // for some reason I can't rely on the store to sort the recs by name, so do it before adding
      var studies = {};
      for (var i = 0; i < json.length; i++) {
        studies[json[i].name] = new glatosStudiesStore.recordType({
           'id'             : json[i].id
          ,'name'           : json[i].name
          ,'description'    : json[i].description
          ,'species'        : json[i].species
          ,'start'          : isoDateToDate(json[i].start)
          ,'ending'         : isoDateToDate(json[i].ending)
          ,'url'            : json[i].url
          ,'seasonal'       : json[i].seasonal == 'true'
          ,'code'           : json[i].code
          ,'model'          : json[i].model
          ,'receiversCount' : 'loading'
        });
        var ymd = json[i].start.split('T')[0].split('-');
        var d   = new Date(ymd[0],ymd[1] - 1,ymd[2]);
        if (!minD || d < minD) {
          minD = d;
        }
      }
      var sKeys = [];
      for (var s in studies) {
        sKeys.push(s);
      }
      sKeys.sort();
      for (var i = 0; i < sKeys.length; i++) {
        glatosStudiesStore.add(studies[sKeys[i]]);
      }
      glatosStudiesStore.fireEvent('load');
      Ext.getCmp('glatosStudiesGridPanel').getSelectionModel().selectAll();
      Ext.getCmp('glatosStudiesGridPanel').setHeight(glatosStudiesStore.getCount() * 21.1 + 26 + 6 + 25);

      OpenLayers.Request.issue({
         method   : 'GET'
        ,url      : '/deployments.geo'
        ,callback : function(r) {
          var json        = new OpenLayers.Format.JSON().read(r.responseText);
          var models      = {};
          var frequencies = {};
          for (var i in json) {
            if (json[i].geojson) {
              var wkt = new OpenLayers.Format.WKT();
              var f   = wkt.read(json[i].geojson.geometry);
              f.geometry.transform(proj4326,map.getProjectionObject());
              for (var j in json[i].geojson.properties) {
                if (json[i].geojson.properties[j]) {
                  f.attributes[j] = json[i].geojson.properties[j];
                }
              }
              glatosDeployments.features.push(f);
              if (f.attributes.start && isoDateToDate(f.attributes.start).getTime() < glatosDeployments.start.getTime()) {
                glatosDeployments.start = isoDateToDate(f.attributes.start);
              }
              if (f.attributes.recovered && isoDateToDate(f.attributes.recovered).getTime() > glatosDeployments.ending.getTime()) {
                glatosDeployments.ending = isoDateToDate(f.attributes.recovered);
              }
              if (f.attributes.model) {
                models[f.attributes.model] = true;
              }
              if (f.attributes.frequency) {
                frequencies[f.attributes.frequency] = true;
              }
            }
          }

          deploymentsLayer.addFeatures(glatosDeployments.features);

          for (var i in frequencies) {
            glatosDeployments.frequencies.push(i);
          }
          glatosDeployments.frequencies.sort();
          var sto = Ext.getCmp('glatosFrequenciesGridPanel').getStore();
          for (var i = 0; i < glatosDeployments.frequencies.length; i++) {
            sto.add(new sto.recordType({
              frequency : glatosDeployments.frequencies[i]
            }));
          }
          Ext.getCmp('glatosFrequenciesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosFrequenciesGridPanel').setHeight(sto.getCount() * 21.1 + 26 + 6);

          Ext.getCmp('glatosTimesStart').setValue(glatosDeployments.start);
          Ext.getCmp('glatosTimesStart').setMinValue(glatosDeployments.start);
          Ext.getCmp('glatosTimesStart').setMaxValue(glatosDeployments.ending);
          Ext.getCmp('glatosTimesEnd').setValue(glatosDeployments.ending);
          Ext.getCmp('glatosTimesEnd').setMinValue(glatosDeployments.start);
          Ext.getCmp('glatosTimesEnd').setMaxValue(glatosDeployments.ending);
          Ext.getCmp('glatosTimesStart').enable();
          Ext.getCmp('glatosTimesEnd').enable();
        }
      });
    }
  });
}

function renderReceiversCount(val,metadata,rec) {
  if (val == 'loading') {
    return "<img height=12 src='<%= asset_path 'loading.gif' %>'>"; // brokenImg
  }
  else {
    return val + ' on map';
  }
}

function isoDateToDate(s) {
  // 2010-01-01T00:00:00Z
  var p = s.split('T');
  var ymd = p[0].split('-');
  var hm = p[1].split(':');
  return new Date(
     ymd[0]
    ,ymd[1] - 1
    ,ymd[2]
    ,hm[0]
    ,hm[1]
  );
}

function dateToString(d) {
  var mon = ['Jan','Feb','Mar','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
  return mon[d.getMonth()] + ' ' + d.getDate() + ', ' + d.getFullYear();
}

var map;
var proj900913 = new OpenLayers.Projection("EPSG:900913");
var proj4326   = new OpenLayers.Projection("EPSG:4326");
var glatosStatsStore     = new Ext.data.ArrayStore({fields : []});
var glatosStudiesStore   = new Ext.data.ArrayStore({fields : []});
var glatosModelStore     = new Ext.data.ArrayStore({fields : []});

function init() {
  Ext.QuickTips.init();

  var loadingMask = Ext.get('loading-mask');
  var loading = Ext.get('loading');

  //Hide loading message
  loading.fadeOut({duration : 0.2,remove : true});

  //Hide loading mask
  loadingMask.setOpacity(0.9);
  loadingMask.shift({
     xy       : loading.getXY()
    ,width    : loading.getWidth()
    ,height   : loading.getHeight()
    ,remove   : true
    ,duration : 1
    ,opacity  : 0.1
    ,easing   : 'bounceOut'
  });

  Ext.QuickTips.init();

  // don't remember window settings
  Ext.override(Ext.Component,{
    stateful : false
  });

  var introPanel = new Ext.Panel({
     height : 65
    ,border : false
    ,html   : '<table class="smallFont" width="100%"><tr><td align=justify>Place your curser over points on the map to view additional information about projects and receivers.  Use the tools below to filter receivers by project, operating schedule, acoustic frequency, and status.</td></tr></table>'
  });

  var glatosStudiesSelModel = new Ext.grid.CheckboxSelectionModel({
    header : ''
  });
  var glatosStudiesGridPanel = new Ext.grid.GridPanel({
     id               : 'glatosStudiesGridPanel'
    ,title            : 'Filter by project'
    ,store            : glatosStudiesStore
    ,height           : 2 * 21.1 + 26 + 11 + 25
    ,border           : false
    ,autoExpandColumn : 'name'
    ,columns          : [
       glatosStudiesSelModel
      ,{id : 'name'          ,dataIndex : 'name'}
      ,{id : 'receiversCount',dataIndex : 'receiversCount',renderer : renderReceiversCount,align : 'right',width : 70}
    ]
    ,hideHeaders      : true
    ,loadMask         : true
    ,deferRowRender   : false
    ,selModel         : glatosStudiesSelModel
    ,listeners        : {
      rowclick : function(grid,rowIndex,e) {
        return; // foo
        syncGlatos(true);
      }
    }
    ,tbar             : [
       '->'
      ,{
         text    : 'Reset all filters'
        ,icon    : "#{asset_path 'arrow_refresh.png'}" // brokenImg
        ,handler : function() {
          return; // foo
          Ext.getCmp('glatosSeasonalGridPanel').getSelectionModel().suspendEvents();
          Ext.getCmp('glatosTimesStart').suspendEvents();
          Ext.getCmp('glatosTimesEnd').suspendEvents();
          Ext.getCmp('glatosStudiesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosStudiesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosModelsGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosSeasonalGridPanel').getSelectionModel().selectRow(0)
          Ext.getCmp('glatosProjectStatusesGridPanel').getSelectionModel().selectAll();
          Ext.getCmp('glatosTimesStart').setValue(Ext.getCmp('glatosTimesStart').minValue);
          Ext.getCmp('glatosTimesEnd').setValue(Ext.getCmp('glatosTimesEnd').maxValue);
          Ext.getCmp('glatosSeasonalGridPanel').getSelectionModel().resumeEvents();
          Ext.getCmp('glatosTimesStart').resumeEvents();
          Ext.getCmp('glatosTimesEnd').resumeEvents();
          syncGlatos(true);
        }
      }
    ]
  });

  var glatosSeasonalSelModel = new Ext.grid.CheckboxSelectionModel({
     header       : ''
    ,singleSelect : true
    // make sure 1 row is selected
    ,listeners    : {rowdeselect : function(selModel,idx) {
      selModel.selectRow((idx  + 1) % 2);
    }}
  });
  var glatosSeasonalGridPanel = new Ext.grid.GridPanel({
     id               : 'glatosSeasonalGridPanel'
    ,title            : 'Filter by operating schedule'
    ,store            : new Ext.data.ArrayStore({
      fields : [
        'name'
      ]
      ,data : [
         ['Year-round']
        ,['Seasonal only']
      ]
    })
    ,height           : 2 * 21.1 + 26 + 11
    ,border           : false
    ,autoExpandColumn : 'name'
    ,columns          : [
       glatosSeasonalSelModel
      ,{id : 'name',dataIndex : 'name'}
    ]
    ,hideHeaders      : true
    ,loadMask         : true
    ,deferRowRender   : false
    ,selModel         : glatosSeasonalSelModel
    ,listeners        : {
      rowclick : function(grid,rowIndex,e) {
        return; // foo
        syncGlatos(true);
      }
      ,viewready : function(grid) {
        grid.suspendEvents();
        grid.getSelectionModel().selectRow(0);
        grid.resumeEvents();
      }
    }
  });

  var glatosFrequenciesSelModel = new Ext.grid.CheckboxSelectionModel({
    header : ''
  });
  var glatosFrequenciesGridPanel = new Ext.grid.GridPanel({
     id               : 'glatosFrequenciesGridPanel'
    ,title            : 'Filter by acoustic frequency'
    ,store            : new Ext.data.ArrayStore({fields : ['frequency']})
    ,height           : 2 * 21.1 + 26 + 11
    ,border           : false
    ,autoExpandColumn : 'frequency'
    ,columns          : [
       glatosFrequenciesSelModel
      ,{id : 'frequency',dataIndex : 'frequency'}
    ]
    ,hideHeaders      : true
    ,loadMask         : true
    ,deferRowRender   : false
    ,selModel         : glatosFrequenciesSelModel
    ,listeners        : {
      rowclick : function(grid,rowIndex,e) {
        return; // foo
        syncGlatos(true);
      }
    }
  });

  var glatosProjectStatusSelModel = new Ext.grid.CheckboxSelectionModel({
    header : ''
  });
  var glatosProjectStatusesGridPanel = new Ext.grid.GridPanel({
     id               : 'glatosProjectStatusesGridPanel'
    ,title            : 'Filter by status'
    ,store            : new Ext.data.ArrayStore({
      fields : [
        'name'
      ]
      ,data : [
         ['Ongoing']
        ,['Proposed']
        ,['Finished']
      ]
    })
    ,height           : 3 * 21.1 + 26 + 11
    ,border           : false
    ,autoExpandColumn : 'name'
    ,collapsible      : true
    ,columns          : [
       glatosProjectStatusSelModel
      ,{id : 'name',dataIndex : 'name'}
    ]
    ,hideHeaders      : true
    ,loadMask         : true
    ,deferRowRender   : false
    ,selModel         : glatosProjectStatusSelModel
    ,listeners        : {
      rowclick : function(grid,rowIndex,e) {
        return; // foo
        syncGlatos(true);
      }
      ,viewready : function(grid) {
        grid.suspendEvents();
        grid.getSelectionModel().selectAll();
        grid.resumeEvents();
      }
      ,collapse  : function() {
        Ext.getCmp('glatosTimesFormPanel').expand();
      }
      ,expand    : function() {
        Ext.getCmp('glatosTimesFormPanel').collapse();
        return; // foo
        syncGlatos(true);
      }
    }
  });

  var glatosTimesFormPanel = new Ext.FormPanel({
     id          : 'glatosTimesFormPanel'
    ,title       : 'Filter by time'
    ,height      : 2 * 21.1 + 26 + 11 + 20
    ,border      : false
    ,collapsible : true
    ,collapsed   : true
    ,labelWidth  : 1
    ,layout      : 'column'
    ,tbar             : [
       '->'
      ,{
         text    : 'Reset times'
        ,icon    : 'img/arrow_refresh.png'
        ,handler : function() {
          return; // foo
          Ext.getCmp('glatosTimesStart').suspendEvents();
          Ext.getCmp('glatosTimesEnd').suspendEvents();
          Ext.getCmp('glatosTimesStart').setValue(Ext.getCmp('glatosTimesStart').minValue);
          Ext.getCmp('glatosTimesEnd').setValue(Ext.getCmp('glatosTimesEnd').maxValue);
          Ext.getCmp('glatosTimesStart').resumeEvents();
          Ext.getCmp('glatosTimesEnd').resumeEvents();
          syncGlatos(true);
        }
      }
    ]
    ,items       : [
      {border : false,columnWidth : 0.40,layout : 'form',items : new Ext.form.DateField({
         id         : 'glatosTimesStart'
        ,disabled   : true
        ,showToday  : false
        ,allowBlank : false
        ,width      : 100
        ,listeners  : {change : function() {
          return; // foo
          syncGlatos(true);
        }}
      })}
      ,{border : false,columnWidth : 0.10,layout : 'form',html : '-',bodyStyle : 'text-align:center'}
      ,{border : false,columnWidth : 0.40,layout : 'form',items : new Ext.form.DateField({
         id         : 'glatosTimesEnd'
        ,disabled   : true
        ,showToday  : false
        ,allowBlank : false
        ,width      : 100
        ,listeners  : {change : function() {
          return; // foo
          syncGlatos(true);
        }}
      })}
      ,{border : false,columnWidth : 0.10,layout : 'form',items : new Ext.Button({
         text : 'Go'
      })}
    ]
    ,listeners : {
      collapse : function() {
        Ext.getCmp('glatosProjectStatusesGridPanel').expand();
      }
      ,expand  : function() {
        Ext.getCmp('glatosProjectStatusesGridPanel').collapse();
        return; // foo
        syncGlatos(true);
      }
    }
  });

  new Ext.Viewport({
     layout : 'border'
    ,items  : [
      new Ext.Panel({
         region : 'north'
        ,id     : 'banner'
        ,html   : ''
        ,height : 81
        ,border : false
      })
      ,new Ext.Panel({
         region      : 'west'
        ,width       : 275
        ,title       : 'GLATOSWeb Explore Tool'
        ,collapsible : true
        ,autoScroll  : true
        ,items       : [
           introPanel
          ,glatosStudiesGridPanel
          ,glatosSeasonalGridPanel
          ,glatosFrequenciesGridPanel
          ,glatosProjectStatusesGridPanel
          ,glatosTimesFormPanel
        ]
      })
      ,new Ext.Panel({
         region    : 'center'
        ,id        : 'mapPanel'
        ,items     : {
           border    : false
          ,html      : '<div id="map"></div>'
          ,listeners : {afterrender : function() {
            initMap();
            if (Ext.isIE) {
              Ext.getCmp('mapPanel').fireEvent('bodyresize');
            }
          }}
        }
        ,listeners : {bodyresize : function() {
          var el = document.getElementById('map');
          if (el) {
            el.style.width  = this.getWidth() + 'px';
            el.style.height = this.getHeight() + 'px';
            map.updateSize();
          }
        }}
      })
    ]
  });
}

function initMap() {
  map = new OpenLayers.Map('map',{
     projection        : proj900913
    ,displayProjection : proj4326
    ,units             : "m"
    ,maxExtent         : new OpenLayers.Bounds(-20037508,-20037508,20037508,20037508.34)
    ,layers            : [
      new OpenLayers.Layer.Google('Google Satellite',{
         type          : google.maps.MapTypeId.SATELLITE
        ,projection    : proj900913
      })
    ]
  });
  map.setCenter(new OpenLayers.LonLat(-9367578.6331264,5443194.7163551),6);

  glatosStudiesStore.fireEvent('beforeload');
  OpenLayers.Request.issue({
     method  : 'GET'
    ,url     : '/studies.json'
    ,callback : function(r) {
      var json = new OpenLayers.Format.JSON().read(r.responseText);
      var menu = [];
      var minD;
      // for some reason I can't rely on the store to sort the recs by name, so do it before adding
      var studies = {};
      for (var i = 0; i < json.length; i++) {
        studies[json[i].name] = new glatosStudiesStore.recordType({
           'id'             : json[i].id
          ,'name'           : json[i].name
          ,'description'    : json[i].description
          ,'species'        : json[i].species
          ,'start'          : isoDateToDate(json[i].start)
          ,'end'            : isoDateToDate(json[i].ending)
          ,'url'            : json[i].url
          ,'seasonal'       : json[i].seasonal == 'true'
          ,'code'           : json[i].code
          ,'model'          : json[i].model
          ,'receiversCount' : 'loading'
        });
        var ymd = json[i].start.split('T')[0].split('-');
        var d   = new Date(ymd[0],ymd[1] - 1,ymd[2]);
        if (!minD || d < minD) {
          minD = d;
        }
      }
      var sKeys = [];
      for (var s in studies) {
        sKeys.push(s);
      }
      sKeys.sort();
      for (var i = 0; i < sKeys.length; i++) {
        glatosStudiesStore.add(studies[sKeys[i]]);
      }
      glatosStudiesStore.fireEvent('load');
      Ext.getCmp('glatosStudiesGridPanel').getSelectionModel().selectAll();
      Ext.getCmp('glatosStudiesGridPanel').setHeight(glatosStudiesStore.getCount() * 21.1 + 26 + 11 + 25);
    }
  });
}

function renderReceiversCount(val,metadata,rec) {
  if (val == 'loading') {
    return "<img height=12 src='img/loading.gif'>"; // brokenImg
  }
  else {
    return val + ' on map';
  }
}

function isoDateToDate(s) {
  // 2010-01-01T00:00:00Z
  var p = s.split('T');
  var ymd = p[0].split('-');
  var hm = p[1].split(':');
  return new Date(
     ymd[0]
    ,ymd[1] - 1
    ,ymd[2]
    ,hm[0]
    ,hm[1]
  );
}
